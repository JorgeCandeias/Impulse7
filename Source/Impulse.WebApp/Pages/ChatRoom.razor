@page "/"
@using Impulse.Models;
@using Orleans.Runtime;
@using Orleans.Streams;
@using Impulse.Grains;
@using System.Diagnostics;
@inject NavigationManager _navigationManager
@inject IClusterClient _client;
@implements IAsyncDisposable

<h1>Impulse 7</h1>
<hr />

@if (!_isChatting)
{
    <p>
        Enter the room and your name to start chatting:
    </p>

    <form @onsubmit="Chat">
        <input type="text" maxlength="32" @bind="@_room" placeholder="Room" />
        <input type="text" maxlength="32" @bind="@_username" placeholder="User" />
        <button type="submit" class="btn btn-primary"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>
    </form>

    // Error messages
    @if (_message != null)
    {
        <div>
            <div class="invalid-feedback">@_message</div>
            <small id="emailHelp" class="form-text text-muted">@_message</small>
        </div>
    }
}
else
{
    // banner to show current user
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@_username</b></span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
    </div>
    // display messages
    <div id="scrollbox" class="overflow-visible">
        @foreach (var item in _messages)
        {
            @if (item.IsNotice)
            {
                <div class="alert alert-info">@item.Body</div>
            }
            else
            {
                <div class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">@item.Body</div>
                </div>
            }
        }
        <hr />
    </div>
    <form id="send" @onsubmit="@(() => SendAsync(_newMessage))">
        <input type="text" class="col-md-10" placeholder="enter your comment" @bind="@_newMessage"></input>
        <button type="submit" class="btn btn-primary">Send</button>
    </form>

}

@code {

    // flag to indicate chat status
    private bool _isChatting = false;

    // name of the chat room
    private string _room = "";

    // name of the user who will be chatting
    private string _username = "";

    // on-screen message
    private string _message = "";

    // new message input
    private string _newMessage = "";

    // list of messages in chat
    private List<Message> _messages = new();

    private StreamSubscriptionHandle<ChatMessage>? _subscription;

    public async Task Chat()
    {
        // check room is valid
        if (string.IsNullOrWhiteSpace(_room))
        {
            _message = "Please enter a room";
            return;
        }

        // check username is valid
        if (string.IsNullOrWhiteSpace(_username))
        {
            _message = "Please enter a name";
            return;
        };

        try
        {
            // Start chatting and force refresh UI.
            _isChatting = true;
            await Task.Delay(1);

            // remove old messages if any
            _messages.Clear();

            // get the user - for sample purposes we always get or create the user
            var user = await _client.GetChatUsersIndexGrain().GetOrAdd(_username);

            // join the chat room - this will trigger a stream broadcast with the joined message
            await _client.GetActiveChatRoomGrain(_room).Join(user);

            // get the message history
            var messages = await _client.GetActiveChatRoomGrain(_room).GetMessages();
            foreach (var message in messages)
            {
                ShowMessage(message.User, message.Text);
            }

            // subscribe to the chat room stream
            _subscription = await _client.GetStreamProvider("Chat").GetStream<ChatMessage>(_room).SubscribeAsync((message, token) =>
            {
                return InvokeAsync(() => ShowMessage(message.User, message.Text));
            });
        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }
    }

    private void ShowMessage(string name, string message)
    {
        bool isMine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new Message(name, message, isMine));

        StateHasChanged();
    }

    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            // unsubscribe to the stream
            if (_subscription is not null)
            {
                await _subscription.UnsubscribeAsync();
                _subscription = null;
            }

            // leave the channel
            var user = await _client.GetChatUsersIndexGrain().GetOrAdd(_username);
            await _client.GetActiveChatRoomGrain(_room).Leave(user);

            _isChatting = false;
        }
    }

    private async Task SendAsync(string message)
    {
        RequestContext.Set("ActivityId", Activity.Current?.Id);

        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            await _client
                .GetActiveChatRoomGrain(_room)
                .Message(new ChatMessage(Guid.NewGuid(), _room, _username, message, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow));

            _newMessage = string.Empty;

            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            await DisconnectAsync();
        }
        catch
        {
            // noop
        }
    }

    private class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        public bool IsNotice => Body.StartsWith("[Notice]");

        public string CSS => Mine ? "sent" : "received";
    }
}